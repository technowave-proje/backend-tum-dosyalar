# app/api/v1/routers/weather.py
from fastapi import APIRouter, Depends, HTTPException
'''
FastAPIâ€™den Ã¼Ã§ ÅŸeyi iÃ§e aktarÄ±yoruz:
APIRouter â†’ Endpointâ€™leri organize etmek ve modÃ¼ler bir router oluÅŸturmak iÃ§in.
Depends â†’ Dependency Injection (baÄŸÄ±mlÄ±lÄ±k yÃ¶netimi) iÃ§in, Ã¶rneÄŸin DB oturumu almak.
HTTPException â†’ Hata durumlarÄ±nÄ± HTTP kodu ile dÃ¶ndÃ¼rmek iÃ§in.
'''
from sqlalchemy.orm import Session
'''
SQLAlchemyâ€™nin Session sÄ±nÄ±fÄ±.
VeritabanÄ± ile iletiÅŸim kurmak, sorgu yapmak, veri eklemek veya gÃ¼ncellemek iÃ§in kullanÄ±lÄ±r.
'''
from datetime import datetime
'''
Pythonâ€™un tarih ve saat yÃ¶netim kÃ¼tÃ¼phanesi.
Ã–rneÄŸin, hava durumu Ã¶lÃ§Ã¼mÃ¼nÃ¼n zamanÄ±nÄ± kaydetmek iÃ§in.
'''
from app.db.session import get_db
'''
get_db â†’ DB oturumu saÄŸlayan fonksiyon.
Depends(get_db) ile endpointâ€™e aktarÄ±lÄ±r, bÃ¶ylece her Ã§aÄŸrÄ±da DB oturumu aÃ§Ä±lÄ±r ve kapanÄ±r.
'''
from app import crud
'''
CRUD modÃ¼lÃ¼: DB iÅŸlemleri iÃ§in kullanÄ±lan fonksiyonlar.
upsert_weather veya get_last_24h_weather gibi fonksiyonlar burada tanÄ±mlanmÄ±ÅŸtÄ±r.
'''
from pydantic import BaseModel
'''
BaseModel â†’ APIâ€™ye gelen JSON verisini doÄŸrulamak ve tip gÃ¼venliÄŸi saÄŸlamak iÃ§in.
Pydantic modeli, FastAPI ile otomatik veri doÄŸrulama saÄŸlar.
'''

router = APIRouter()
'''
Yeni bir FastAPI router oluÅŸturuyoruz.
Bu routerâ€™a endpoint ekleyip daha sonra ana FastAPI uygulamasÄ±na baÄŸlayabiliriz.
'''

class WeatherCreate(BaseModel):
    location_id: int
    timestamp: datetime
    temperature: float | None = None
    humidity: float | None = None
    wind_speed: float | None = None
    pressure: float | None = None
'''
WeatherCreate â†’ APIâ€™ye gÃ¶nderilecek hava durumu verisi iÃ§in Pydantic modeli.
Alanlar:
location_id: int â†’ Hangi konum iÃ§in veri geldiÄŸini belirler (zorunlu).
timestamp: datetime â†’ Ã–lÃ§Ã¼m zamanÄ± (zorunlu).
temperature, humidity, wind_speed, pressure â†’ Hava durumu verileri, opsiyonel (None default deÄŸeri).
'''

@router.get("/latest")
# Bu endpoint /latest yoluna gelen GET isteÄŸini yakalar.
# AmaÃ§: Belirtilen konum iÃ§in son 24 saatin hava durumu verilerini almak.

def get_latest_weather(location_id: int, db: Session = Depends(get_db)):
    '''
    Endpoint fonksiyonu:
    location_id: int â†’ URL parametresi olarak konum IDâ€™si.
    db: Session = Depends(get_db) â†’ DB oturumu, FastAPI otomatik olarak saÄŸlar.
    '''
    recs = crud.get_last_24h_weather(db, location_id)
    '''
    get_last_24h_weather â†’ DBâ€™den son 24 saatin hava durumu kayÄ±tlarÄ±nÄ± Ã§ekiyor.
    recs â†’ bir liste dÃ¶ner, her eleman bir dict veya model nesnesi olabilir.
    '''
    if not recs:
        raise HTTPException(status_code=404, detail="No weather data found")
    '''
        EÄŸer veri yoksa:
        HTTP 404 Not Found hatasÄ± dÃ¶ndÃ¼rÃ¼lÃ¼r.
        detail â†’ kullanÄ±cÄ±ya gÃ¶sterilecek aÃ§Ä±klama mesajÄ±.
    '''
    # return latest entry
    return recs[-1]
'''
Liste iÃ§indeki son kayÄ±t (recs[-1]) alÄ±nÄ±r ve JSON olarak dÃ¶ndÃ¼rÃ¼lÃ¼r.
Bu, son Ã¶lÃ§Ã¼mÃ¼n en gÃ¼ncel veri olduÄŸunu garanti eder.
'''


@router.post("/", status_code=201)
# Bu endpoint / yoluna POST isteÄŸi geldiÄŸinde Ã§alÄ±ÅŸÄ±r.
# status_code=201 â†’ Yeni veri oluÅŸturulduÄŸunda HTTP 201 Created dÃ¶ndÃ¼rÃ¼r.

def create_or_update_weather(payload: WeatherCreate, db: Session = Depends(get_db)):
    '''
    POST endpoint fonksiyonu:
    payload: WeatherCreate â†’ Ä°stek gÃ¶vdesinde JSON olarak gelen veri, Pydantic ile doÄŸrulanÄ±r.
    db: Session = Depends(get_db) â†’ DB oturumu.
    '''
    obj = crud.upsert_weather(
        db,
        location_id=payload.location_id,
        timestamp=payload.timestamp,
        temperature=payload.temperature,
        humidity=payload.humidity,
        wind_speed=payload.wind_speed,
        pressure=payload.pressure,
    )
    '''
    upsert_weather â†’ EÄŸer kayÄ±t varsa gÃ¼nceller, yoksa yeni kayÄ±t ekler (UPSERT).
    payloadâ€™daki tÃ¼m alanlar parametre olarak geÃ§iliyor.
    '''
    return obj
'''
OluÅŸturulan veya gÃ¼ncellenen kayÄ±t JSON olarak dÃ¶ndÃ¼rÃ¼lÃ¼r.
FastAPI dict veya Pydantic modelini otomatik JSONâ€™a Ã§evirir.

ğŸ’¡ Ã–zet AkÄ±ÅŸ:

GET /latest â†’ son 24 saatin hava durumu verilerini DBâ€™den alÄ±r, son kaydÄ± dÃ¶ndÃ¼rÃ¼r.
POST / â†’ Gelen hava durumu verisini DBâ€™ye ekler veya gÃ¼nceller.
crud modÃ¼lÃ¼ DB ile tÃ¼m CRUD iÅŸlemlerini yÃ¶netir.
Depends(get_db) ile her Ã§aÄŸrÄ±da DB oturumu saÄŸlanÄ±r.
Pydantic odeli (WeatherCreate) veri doÄŸrulama saÄŸlar.
'''